/**
*   @file    Can_43_MCAN_Cfg.h
*   @implements Can_43_MCAN_Cfg.h_Artifact
*   @version 1.0.1
*
*   @brief   AUTOSAR MCan - module interface
*   @details Configuration settings generated by user settings.
*
*   @addtogroup CAN_DRIVER
*   @{
*/
/*==================================================================================================
*   Project              : AUTOSAR 4.0 MCAL
*   Platform             : PA
*   Peripheral           : MCAN
*   Dependencies         : 
*
*   Autosar Version      : 4.0.3
*   Autosar Revision     : ASR_REL_4_0_REV_0003
*   Autosar Conf.Variant :
*   SW Version           : 1.0.1
*   Build Version        : MPC5777C_MCAL_1_0_1_RTM_HF1_ASR_REL_4_0_REV_0003_20170606
*
*   (c) Copyright 2006-2016 Freescale Semiconductor, Inc. 
*       Copyright 2017 NXP
*   All Rights Reserved.
==================================================================================================*/
/*==================================================================================================
==================================================================================================*/
/*
@brief   (CAN023) The consistency of the configuration must be checked by the configuration tool(s).
@brief   (CAN022) The code configurator of the Can module is CAN controller specific.
         If the CAN controller is sited on-chip, the code generation tool for the Can module is Controller specific.
         If the CAN controller is an external device the generation tool must not be Controller specific.
@brief   (CAN024) The valid values that can be configured are hardware dependent.
         Therefore the rules and constraints can't be given in the standard.
         The configuration tool is responsible to do a static configuration checking, also regarding dependencies between modules (i.e. Port driver, MCU driver etc.)
*/
/*
* @file    Can_43_MCAN_Cfg.h
*/

#ifndef CAN_43_MCAN_CFG_H
#define CAN_43_MCAN_CFG_H

#ifdef __cplusplus
extern "C"{
#endif

/**
* @page misra_violations MISRA-C:2004 violations
*
* @section Can_43_MCAN_Cfg_H_REF_2
* Violates MISRA 2004 Required Rule 8.7, Global variables containing the generated configuration
* shall be defined in a separate source file and can't be defined inside a function although it is accessed
* by a single function.
*
* @section Can_43_MCAN_Cfg_H_REF_3
* Violates MISRA 2004 Advisory Rule 19.7, Function-like macro defined
* This violation is due to function like macros defined for register operations.
* Function like macros are used to reduce code complexity.
*
* @section Can_43_MCAN_Cfg_H_REF_4
* Violates MISRA 2004 Required Rule 19.4, C macros shall only expand to a braced initialiser, a constant, a
* parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
*
* @section [global]
* Violates MISRA 2004 Required Rule 1.4, The compiler/linker shall be checked to ensure
* that 31 character significance and case sensitivity are supported for external identifiers.
* The defines are validated.
*
* @section [global]
*          Violates MISRA 2004 Required Rule 5.1, Identifiers (internal and external) shall not rely 
*          on the significance of more than 31 characters. The used compilers use more than 31 chars 
*          for identifiers.
*
*
*/

/*==================================================================================================
*                                        INCLUDE FILES
* 1) system and project includes
* 2) needed interfaces from external units
* 3) internal and external interfaces from this unit
==================================================================================================*/
#include "Std_Types.h"


/*==================================================================================================
*                              SOURCE FILE VERSION INFORMATION
==================================================================================================*/
/*
* @file           Can_43_MCAN_Cfg.h
*/
#define CAN_43_MCAN_VENDOR_ID_CFG                       43
#define CAN_43_MCAN_MODULE_ID_CFG                       80
/* @violates @ref Can_43_MCAN_Cfg_H_REF_1 Violates MISRA 2004 Required Rule 5.1, The long identifiers are maintained for better readability. */
#define CAN_43_MCAN_AR_RELEASE_MAJOR_VERSION_CFG_H      4
/* @violates @ref Can_43_MCAN_Cfg_H_REF_1 Violates MISRA 2004 Required Rule 5.1, The long identifiers are maintained for better readability. */
#define CAN_43_MCAN_AR_RELEASE_MINOR_VERSION_CFG_H      0
/* @violates @ref Can_43_MCAN_Cfg_H_REF_1 Violates MISRA 2004 Required Rule 5.1, The long identifiers are maintained for better readability. */
#define CAN_43_MCAN_AR_RELEASE_REVISION_VERSION_CFG_H   3
#define CAN_43_MCAN_SW_MAJOR_VERSION_CFG_H              1
#define CAN_43_MCAN_SW_MINOR_VERSION_CFG_H              0
#define CAN_43_MCAN_SW_PATCH_VERSION_CFG_H              1

#ifndef DISABLE_MCAL_INTERMODULE_ASR_CHECK
    /* Check if header file and Std_Types.h file are of the same Autosar version */
    #if ((CAN_43_MCAN_AR_RELEASE_MAJOR_VERSION_CFG_H != STD_AR_RELEASE_MAJOR_VERSION) || \
         (CAN_43_MCAN_AR_RELEASE_MINOR_VERSION_CFG_H != STD_AR_RELEASE_MINOR_VERSION)    \
        )
        #error "AutoSar Version Numbers of Can_43_MCAN_Cfg.h and Std_Types.h are different"
    #endif

#endif

/**
* @brief          Support for User Mode feature.
* @details        This parameter is enabled only in order to support the write access to some registers are protected in user mode.
*/

#define CAN_43_MCAN_ENABLE_USER_MODE_SUPPORT (STD_OFF)

/*==================================================================================================
*                                          CONSTANTS
==================================================================================================*/
/**
* @brief          Can Controllers. Defines for conversion between object names and object IDs.
* @details        Can Controllers. Defines for conversion between object names and object IDs.
(PR-MCAL-2944)Numeric ID's in configuration and definition of symbolic names in Can_43_MCAN_Cfg.h file
*
*/
#define CanController_5  ((uint8)0U)  /* Default configuration for MCAN_1 */
#define CanController_6  ((uint8)1U)  /* Default configuration for MCAN_2 */

/**
* @brief          Can Controller Configurations.
* @details        Can Controller Configurations.
(PR-MCAL-2944)Numeric ID's in configuration and definition of symbolic names in Can_43_MCAN_Cfg.h file.
*
*/
#define CanController_5_config  (0U)  /* Default configuration for CanController ID=0, MCAN_1 */
#define CanController_6_config  (1U)  /* Default configuration for CanController ID=1, MCAN_2 */


/**
* @brief          Can Hardware Objects.
* @details        Can Hardware Objects.
(PR-MCAL-2944)Numeric ID's in configuration and definition of symbolic names in Can_43_MCAN_Cfg.h file.
*
*/
#define Can_43_MCAN_Can_Network_CANNODE_5_Rx_Ext_MailBox_1  0U /* RECEIVE object of Can Controller ID = 0 */
#define Can_43_MCAN_Can_Network_CANNODE_6_Rx_Ext_MailBox_1_UDS  1U /* RECEIVE object of Can Controller ID = 1 */
#define Can_43_MCAN_Can_Network_CANNODE_5_Tx_Std_MailBox_1  2U /* TRANSMIT object of Can Controller ID = 0 */
#define Can_43_MCAN_Can_Network_CANNODE_6_Tx_Std_MailBox_1  3U /* TRANSMIT object of Can Controller ID = 1 */


#define CAN_43_MCAN_LPDU_NOTIFICATION_ENABLE  (STD_OFF)

/*
* @brief          Combined Interrupt.
* @details        Combined Interrupt or Not
- (STD_ON)  - Combined interrupt is supported for Controller .
- (STD_OFF) - Don't support combined interrupt
*
*/
#define CAN_43_MCAN_COMBINED_INTERRUPT     (STD_ON)
/*
* @brief          Extended identifiers.
* @details        Extended identifiers.
- (STD_ON)  - if at least one extended identifier is used.
- (STD_OFF) - if no extended identifiers are used at all
If no extended identifiers are used then the IDs and MASKs can be stored in uint16 rather than uint32.
*
*/
#define CAN_43_MCAN_EXTENDEDID (STD_ON)


#define CAN_43_MCAN_SET_BAUDRATE_API    (STD_OFF)


/*
* @brief          Switches the Can_ChangeBaudrate API and Can_CheckBaudRate API ON or OFF.
* @details        (CAN460) Configuration of Can_CheckBaudrate(Controller, Baudrate): If Can supports changing of the
baudrate and thus this service, shall be configurable via CAN_CHANGE_BAUDRATE_SUPPORT
*
*/
#define CAN_43_MCAN_CHANGE_BAUDRATE_API (STD_ON)

/*
* @brief          Switches the Development Error Detection and Notification ON or OFF.
* @details        (CAN028) Call the Development Error Tracer when DET is switched on and the Can module detects an error.
(CAN082) The detection of development errors is configurable (ON / OFF) at pre- compile time.
The switch CanDevErrorDetection (see chapter 10) shall activate or deactivate the detection of all development errors.
*
*/
#define CAN_43_MCAN_DEV_ERROR_DETECT (STD_OFF)

/*
* @brief          Support for version info API
* @details        Switches the Can_GetVersionInfo() API ON or OFF.
*/
#define CAN_43_MCAN_VERSION_INFO_API (STD_OFF)

/*
* @brief          Support for Multiplexed Transmision
* @details        MB set for Tx is put on bus from any TxMB that is available (free).
*                 (CAN277) The Can module shall allow that the functionality Multiplexed Transmission is statically configurable (ON | OFF) at pre-compile time.
*
*/
#define CAN_43_MCAN_MULTIPLEXED_TRANSMISSION (STD_ON)

/*
* @brief          Support for Transmision Cancellation
* @details        Support for Transmision Cancellation
*                 (CAN278) The Can module shall allow that the functionality Transmit Cancellation is statically configurable (ON | OFF) at pre-compile time.
*
*/
#define CAN_43_MCAN_HW_TRANSMIT_CANCELLATION (STD_ON)

/*
* @brief          Support for Identical Id Cancellation
* @details        Enables/disables cancellation of pending PDUs with identical ID.
*
*/
#define CAN_43_MCAN_IDENTICAL_ID_CANCELLATION (STD_ON)

/*
* @brief          Support for Special MB Abort API
* @details        Enable an additional API, to write an ABORT code (b1001) to the MBCB filed of the MB to abort a message transmission.
*
*/
#define CAN_43_MCAN_API_ENABLE_ABORT_MB (STD_OFF)

/*
* @brief          Instance # of the driver - used for Det_ReportError().
* @details        Instance # of the driver - used for Det_ReportError().
*
*/
#define CAN_43_MCAN_INSTANCE 0U

/*
* @brief          Platform support mix of controllers with 64 and 32 MBs.
* @details        Platform support mix of controllers with 64 and 32 MBs.
*
*/
#define CAN_43_MCAN_MIX_MB_SUPPORT (STD_OFF)

/*
* @brief          Macro defined for mcan specific
*/
#define CAN_43_MCAN_MCAN_SPECIFIC  (STD_ON)


/*
* @brief          Warning notification enabled or disabled on all configurations. Disable at precompile Fifo Warning for code optimization.
* @details        Warning notification enabled or disabled on all configurations. Disable at precompile Fifo Warning for code optimization.
*
*/


#define CAN_43_MCAN_FIFO_WARNING_NOTIFICATION  (STD_OFF)

/*
* @brief          Support for Rx Fifo
* @details        Support for Rx Fifo - If at least one controller supports RxFifo, then this define is set to STD_ON.
*                 This define is global for the entire hardware unit (all controllers). Every controller has particular
*                 configuration for Rx Fifo (see Can_ControllerConfigType structure).
*
*/

#define CAN_43_MCAN_RXFIFO_ENABLE  (STD_OFF)

/*
* @brief          Maximum number of Message Buffers configured.
* @details        Maximum number of Message Buffers configured.
*
*/
#define CAN_43_MCAN_MAXMBCOUNT_0  4U

/*
* @brief          Maximum possible Message Buffers for Rx Buffer
* @details        Maximum possible Message Buffers for Rx Buffer
*
*/
#define CAN_43_MCAN_MAXMB_RXBUFFER_SUPPORTED 64U

/*
* @brief          Maximum possible Message Buffers for Tx Buffer
* @details        Maximum possible Message Buffers for Tx Buffer
*
*/
#define CAN_43_MCAN_MAXMB_TXBUFFER_SUPPORTED 32U

/*
* @brief          Maximum possible Message Buffers for Tx Buffer
* @details        Maximum possible Message Buffers for Tx Buffer
*
*/
#define CAN_43_MCAN_MAX_TX_MB_CONFIG 1U

/*
* @brief          Maximum number of Message Buffers configured.
* @details        Maximum number of Message Buffers configured.
*
*/
#define CAN_43_MCAN_MAXMB_CONFIGURED (2U)

/*
* @brief          Maximum possible controllers per specific derivative.
* @details        Maximum possible controllers per specific derivative.
*
*/
#define CAN_43_MCAN_MAXCTRL_SUPPORTED 2U

/**
* @brief          Maximum No. of supported controllers (vary according to Processor Family).
* @details        Maximum No. of supported controllers (vary according to Processor Family).
*/

#define CAN_43_MCAN_MAXCONTROLLERCOUNT_0  2U

/**
* @brief          Hardware events detected by an interrupt or by polling
* @details        (CAN099) The hardware events may be detected by an interrupt or by polling status flags of the hardware objects.
*                 The configuration possibilities regarding polling is hardware dependent (i.e. which events can be polled, which events need to be polled), and not restricted by this standard.
*                 (CAN007)It shall be possible to configure the driver such that no interrupts at all are used (complete polling).
*
*/

/*
* @brief          This macro enables Can_MainFunction_Write() if at least one controller is set to process Tx in Polling Mode.
* @details        This macro enables Can_MainFunction_Write() if at least one controller is set to process Tx in Polling Mode.
*
*/
#define CAN_43_MCAN_TXPOLL_SUPPORTED (STD_OFF)


/*
* @brief          This macro enables Can_MainFunction_Read() if at least one controller is set to process Rx in Polling Mode.
* @details        This macro enables Can_MainFunction_Read() if at least one controller is set to process Rx in Polling Mode.
*
*/
#define CAN_43_MCAN_RXPOLL_SUPPORTED (STD_OFF)


/*
* @brief          This macro enables Can_MainFunction_BusOff() if at least one controller is set to process BusOff in Polling Mode.
* @details        This macro enables Can_MainFunction_BusOff() if at least one controller is set to process BusOff in Polling Mode.
*
*/
#define CAN_43_MCAN_BUSOFFPOLL_SUPPORTED (STD_ON)


/*
* @brief          This macro enables Can_MainFunction_Wakeup() if at least one controller is set to process WakeUp in Polling Mode.
* @details        This macro enables Can_MainFunction_Wakeup() if at least one controller is set to process WakeUp in Polling Mode.
*
*/
#define CAN_43_MCAN_WAKEUPPOLL_SUPPORTED (STD_ON)


/*
* @brief          This macro enables Can_MainFunction_CheckMRAF() if at least one controller is set to process WakeUp in Polling Mode.
* @details        This macro enables Can_MainFunction_CheckMRAF() if at least one controller is set to process WakeUp in Polling Mode.
*
*/
#define CAN_43_MCAN_MRAFPOLL_SUPPORTED (STD_ON)
#define CAN_43_MCAN_MRAFINT_SUPPORTED (STD_OFF)

/*
* @brief          Maximum number of MB Filters configured.
* @details        Maximum number of MB Filters configured.
*
*/
#define CAN_43_MCAN_MAXFILTERCOUNT_0  3U

/**
* @brief          Maximum number of baudrate configured.
* @details        Maximum number of baudrate configured.
*                 Controller Baudrates configured are in kbps
*
*/

#define CAN_CFGSET0_BAUDRATE_FC_1_0         500U
#define CAN_CFGSET0_MAX_BAUDRATE_FC_1_0          1U
#define CAN_CFGSET0_BAUDRATE_FC_2_0         500U
#define CAN_CFGSET0_MAX_BAUDRATE_FC_2_1          1U

/* CAN FD INIT*/

#define CAN_43_MCAN_FD_MODE_ENABLE (STD_ON)

/** 
* The modular CAN (M_CAN) doesn't support CBT register. 
* This definition is defined as STD_OFF to prevent compiler warnings.
*/
#define CAN_43_MCAN_CBT_ENABLE (STD_OFF)

/*
* @brief          Maximum number of Filters configured.
* @details        Maximum number of Filters configured.
*
*/
#define CAN_43_MCAN_MAX_RX_FILTER_TABLE_0  2U

/*
* @brief
* @details
*
*/
#define CAN_43_MCAN_NUMBER_CONTROLLER_0  (2U)

/*
* @brief          Set if Rx Fifo events (Warning/Overflow/FrameAvailable) are configured on the same int on INTC vector table.
* @details        Set if Rx Fifo events (Warning/Overflow/FrameAvailable) are configured on the same int on INTC vector table.
*                 Based on this define separate interrupts handlers or not will be used for the 3 events of the RxFifo.
*
*/
#define CAN_43_MCAN_RXFIFO_EVENT_UNIFIED (STD_ON)


/*
* @brief          Error notification enabled/disabled.
* @details        Enables/Disables the Error Controller Notification. Used for Interrupts mapping in Can_Irq.c file.
*
*/
#define CAN_43_MCAN_ERROR_NOTIFICATION_ENABLE (STD_ON)

/* Interrupt lines for MCAN 1 */
#define CAN_43_MCAN_IRQ_MCAN1_LINE_0_ENABLE (STD_ON)
#define CAN_43_MCAN_IRQ_MCAN1_LINE_1_ENABLE (STD_OFF)

/* Interrupt lines for MCAN 2 */
#define CAN_43_MCAN_IRQ_MCAN2_LINE_0_ENABLE (STD_ON)
#define CAN_43_MCAN_IRQ_MCAN2_LINE_1_ENABLE (STD_OFF)

/* Interrupt lines for MCAN 3 */

#define CAN_43_MCAN_IRQ_MCAN3_LINE_0_ENABLE (STD_OFF)
#define CAN_43_MCAN_IRQ_MCAN3_LINE_1_ENABLE (STD_OFF)

/* Interrupt lines for MCAN 4 */

#define CAN_43_MCAN_IRQ_MCAN4_LINE_0_ENABLE (STD_OFF)
#define CAN_43_MCAN_IRQ_MCAN4_LINE_1_ENABLE (STD_OFF)

/* Interrupt lines for MTTCAN_0 */

#define CAN_43_MCAN_IRQ_MTTCAN_0_LINE_0_ENABLE (STD_OFF)
#define CAN_43_MCAN_IRQ_MTTCAN_0_LINE_1_ENABLE (STD_OFF)

#define CAN_43_MCAN_INTERRUPT_SUPPORTED (STD_ON)

/*
* @brief          Index into the configuration structures.
* @details        Index into the configuration structures.Indexes used for accessing the 'Can_ControlerDescriptorType' structure.
*                 NOTE that index order from hardware (where CAN_A has always index 0, ..)
*                 may not be the same with the order from the 'Can_ControlerDescriptorType' structure (where user can define controllers in any order).
*                 Count also the number of controllers that have interrupts enabled.
*
*/
#define CAN_43_MCAN_FCA_INDEX       ((uint8)0U)

/*
* @brief          Index into the hardware platform.
* @details        Index into the hardware platform.Indexes used for accessing the 'Can_ControlerDescriptorType' structure.
*
*/
#define MCAN_1_OFFSET    ((uint8)0U)

/*
* @brief          RxFifo Functionality enabled/disabled. Used for Interrupts mapping in Can_Irq.c file.
* @details        RxFifo Functionality enabled/disabled. Used for Interrupts mapping in Can_Irq.c file.
*
*/

/*
* @brief          Error notification enabled/disabled.
* @details        Enables/Disables the Error Controller Notification. Used for Interrupts mapping in Can_Irq.c file.
*
*/
#define CAN_43_MCAN_A_ERROR_NOTIFICATION_ENABLE (STD_ON)

/*
* @brief          Index into the configuration structures.
* @details        Index into the configuration structures.
*
*/
#define CAN_43_MCAN_FCB_INDEX       ((uint8)1U)


/*
* @brief          Index into the hardware platform.
* @details        Index into the hardware platform.
*
*/
#define MCAN_2_OFFSET    ((uint8)1U)
/*
* @brief          RxFifo Functionality enabled/disabled. Used for Interrupts mapping in Can_Irq.c file.
* @details        RxFifo Functionality enabled/disabled. Used for Interrupts mapping in Can_Irq.c file.
*
*/


/*
* @brief          Error notification enabled/disabled.
* @details        Enables/Disables the Error Controller Notification. Used for Interrupts mapping in Can_Irq.c file.
*
*/
#define CAN_43_MCAN_B_ERROR_NOTIFICATION_ENABLE (STD_ON)


/*
* @brief          Enable Non-Autosar API for Dual-Clock support.
* @details        Enable Non-Autosar API for Dual-Clock support.
*                 This can be set to STD_ON only if it is activated from Resource file (Can.CanConfig.DualClockMode = STD_ON)
*
*/
#define CAN_43_MCAN_DUAL_CLOCK_MODE (STD_OFF)

/*
* @brief          (CAN113_Conf) Specifies the maximum time for blocking function until a timeout is detected. Unit in loops.
* @details        (CAN281) The Can module shall use the free running timer provided by the system service for timeout detection in case the hardware does not react
*                  in the expected time (hardware malfunction) to prevent endless loops.
*
*/
#define CAN_43_MCAN_TIMEOUT_DURATION 200U


#define CAN_43_MCAN_PRECOMPILE_SUPPORT (STD_OFF)

/**
* @brief          Export Can_ConfigType structure.
* @details        Export Can_ConfigType structure. This is the type of the external data structure containing
*                 the overall initialization data for the CAN driver and affecting all controllers.
*
*/

#if (CAN_43_MCAN_PRECOMPILE_SUPPORT == STD_OFF)
    /* Export Driver configuration */
    /* @violates @ref Can_43_MCAN_Cfg_H_REF_4 Rule 19.4 C macros shall only expand to a braced initialiser,  a constant, a parenthesised expression */
    #define CAN_43_MCAN_INIT_CONFIG_PB_DEFINES  \
        extern CONST(Can_43_MCAN_ConfigType, CAN_43_MCAN_CONST) Can_43_MCAN_CanConfigSet_0; 
#endif

/*
* @brief          Periods for cyclic call of Main function
* @details        (CAN355_Conf) CanMainFunctionBusoffPeriod - This parameter describes the period for cyclic call to Can_MainFunction_Busoff. Unit is seconds.
*
*/
#define CAN_43_MCAN_MAINFUNCTION_PERIOD_BUSOFF (0.001)

#define CAN_43_MCAN_REAL_PAYLOAD_U8 (Can_Mcan_u8RealPayloadData[CAN_64_BYTES_PAYLOAD])

#if (CAN_43_MCAN_RXPOLL_SUPPORTED == STD_ON)
    /*
    * @brief          Periods for cyclic call of Main function
    * @details        (CAN356_Conf) CanMainFunctionReadPeriod - This parameter describes the period for cyclic call to Can_MainFunction_Read. Unit is seconds.
    *
    */
    #define CAN_43_MCAN_MAINFUNCTION_MULTIPLE_READ   (STD_OFF)
#endif /* (CAN_43_MCAN_RXPOLL_SUPPORTED == STD_OFF) */


#if (CAN_43_MCAN_TXPOLL_SUPPORTED == STD_ON)
    /*
    * @brief          Periods for cyclic call of Main function
    * @details        (CAN356_Conf) CanMainFunctionReadPeriod - This parameter describes the period for cyclic call to Can_MainFunction_Read. Unit is seconds.
    *
    */
    #define CAN_43_MCAN_MAINFUNCTION_MULTIPLE_WRITE   (STD_OFF)
#endif /* (CAN_43_MCAN_TXPOLL_SUPPORTED == STD_OFF) */

/*
* @brief          Periods for cyclic call of Main function Mode
* @details        (CAN376_Conf) This parameter describes the period for cyclic call to Can_MainFunction_Mode. Unit is seconds.
*
*/
#define CAN_43_MCAN_MAINFUNCTION_MODE_PERIOD (0.001)


/*
@brief    Macro used to define the maximum of Can object IDs configured  .
*/
#define CAN_43_MCAN_MAX_OBJECT_ID (4U)


#define CAN_43_MCAN_SUPPORT_MRAF_EVENT    (STD_OFF)
/*==================================================================================================
*                                      DEFINES AND MACROS
==================================================================================================*/

/*==================================================================================================
*                                             ENUMS
==================================================================================================*/

/*==================================================================================================
*                                STRUCTURES AND OTHER TYPEDEFS
==================================================================================================*/

/*==================================================================================================
*                                GLOBAL VARIABLE DECLARATIONS
==================================================================================================*/

/*==================================================================================================
*                                    FUNCTION PROTOTYPES
==================================================================================================*/


#ifdef __cplusplus
}
#endif

#endif /* _CAN_CFG_H_ */

/** @} */
